import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Divider,
  Card,
  CardContent,
  CardHeader,
  IconButton,
  Collapse,
  Alert,
} from '@mui/material';
import {
  BugReport as BugIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Code as CodeIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
} from '@mui/icons-material';

const VulnerabilityDetails = () => {
  const [selectedTab, setSelectedTab] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedVuln, setExpandedVuln] = useState(null);

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    try {
      const response = await fetch('/api/vulnerabilities', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch vulnerabilities');
      }

      const data = await response.json();
      setVulnerabilities(data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
  };

  const handleVulnExpand = (vulnId) => {
    setExpandedVuln(expandedVuln === vulnId ? null : vulnId);
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'error';
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
      case 'high':
        return <ErrorIcon color="error" />;
      case 'medium':
        return <WarningIcon color="warning" />;
      case 'low':
        return <BugIcon color="info" />;
      default:
        return <BugIcon />;
    }
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography>Loading vulnerabilities...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Vulnerability Details
      </Typography>

      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={selectedTab}
          onChange={handleTabChange}
          indicatorColor="primary"
          textColor="primary"
        >
          <Tab label="All Vulnerabilities" />
          <Tab label="By File" />
          <Tab label="By Severity" />
        </Tabs>
      </Paper>

      {selectedTab === 0 && (
        <Grid container spacing={3}>
          {vulnerabilities.map((vuln) => (
            <Grid item xs={12} key={vuln.id}>
              <Card>
                <CardHeader
                  avatar={getSeverityIcon(vuln.severity)}
                  action={
                    <IconButton onClick={() => handleVulnExpand(vuln.id)}>
                      {expandedVuln === vuln.id ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    </IconButton>
                  }
                  title={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="h6">{vuln.title}</Typography>
                      <Chip
                        label={vuln.severity}
                        color={getSeverityColor(vuln.severity)}
                        size="small"
                      />
                    </Box>
                  }
                  subheader={`Found in ${vuln.file} at line ${vuln.line}`}
                />
                <Collapse in={expandedVuln === vuln.id}>
                  <CardContent>
                    <Typography variant="subtitle1" gutterBottom>
                      Description
                    </Typography>
                    <Typography paragraph>{vuln.description}</Typography>

                    <Typography variant="subtitle1" gutterBottom>
                      Impact
                    </Typography>
                    <Typography paragraph>{vuln.impact}</Typography>

                    <Typography variant="subtitle1" gutterBottom>
                      Recommendation
                    </Typography>
                    <Typography paragraph>{vuln.recommendation}</Typography>

                    <Box sx={{ mt: 2 }}>
                      <Typography variant="subtitle1" gutterBottom>
                        Code Context
                      </Typography>
                      <Paper
                        sx={{
                          p: 2,
                          bgcolor: 'grey.100',
                          fontFamily: 'monospace',
                          whiteSpace: 'pre-wrap',
                        }}
                      >
                        {vuln.codeContext}
                      </Paper>
                    </Box>

                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                      <Chip
                        icon={<CodeIcon />}
                        label={`Tool: ${vuln.tool}`}
                        variant="outlined"
                      />
                      <Chip
                        icon={<SecurityIcon />}
                        label={`CWE: ${vuln.cwe}`}
                        variant="outlined"
                      />
                    </Box>
                  </CardContent>
                </Collapse>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {selectedTab === 1 && (
        <Grid container spacing={3}>
          {Object.entries(
            vulnerabilities.reduce((acc, vuln) => {
              if (!acc[vuln.file]) {
                acc[vuln.file] = [];
              }
              acc[vuln.file].push(vuln);
              return acc;
            }, {})
          ).map(([file, vulns]) => (
            <Grid item xs={12} key={file}>
              <Card>
                <CardHeader
                  title={file}
                  subheader={`${vulns.length} vulnerabilities found`}
                />
                <CardContent>
                  <List>
                    {vulns.map((vuln) => (
                      <React.Fragment key={vuln.id}>
                        <ListItem>
                          <ListItemIcon>
                            {getSeverityIcon(vuln.severity)}
                          </ListItemIcon>
                          <ListItemText
                            primary={vuln.title}
                            secondary={`Line ${vuln.line} - ${vuln.description}`}
                          />
                          <Chip
                            label={vuln.severity}
                            color={getSeverityColor(vuln.severity)}
                            size="small"
                          />
                        </ListItem>
                        <Divider />
                      </React.Fragment>
                    ))}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {selectedTab === 2 && (
        <Grid container spacing={3}>
          {['critical', 'high', 'medium', 'low'].map((severity) => {
            const severityVulns = vulnerabilities.filter(
              (v) => v.severity.toLowerCase() === severity
            );
            return (
              <Grid item xs={12} key={severity}>
                <Card>
                  <CardHeader
                    avatar={getSeverityIcon(severity)}
                    title={`${severity.charAt(0).toUpperCase() + severity.slice(1)} Severity`}
                    subheader={`${severityVulns.length} vulnerabilities found`}
                  />
                  <CardContent>
                    <List>
                      {severityVulns.map((vuln) => (
                        <React.Fragment key={vuln.id}>
                          <ListItem>
                            <ListItemText
                              primary={vuln.title}
                              secondary={`${vuln.file}:${vuln.line} - ${vuln.description}`}
                            />
                          </ListItem>
                          <Divider />
                        </React.Fragment>
                      ))}
                    </List>
                  </CardContent>
                </Card>
              </Grid>
            );
          })}
        </Grid>
      )}
    </Box>
  );
};

export default VulnerabilityDetails; 