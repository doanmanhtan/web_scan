// src/api/routes/vulnerabilityRoutes.js
const express = require('express');
const router = express.Router();
const vulnerabilityController = require('../controllers/vulnerabilityController');
const { authenticate } = require('../middleware/auth');
const { validateRequest } = require('../middleware/validation');
const { body } = require('express-validator');

// Validation rules
const updateStatusValidation = [
  body('status')
    .isIn(['open', 'in_progress', 'fixed', 'ignored', 'false_positive'])
    .withMessage('Invalid status. Allowed values: open, in_progress, fixed, ignored, false_positive'),
  body('comment')
    .optional()
    .trim()
    .isLength({ min: 1, max: 1000 })
    .withMessage('Comment must be between 1 and 1000 characters')
];

const addCommentValidation = [
  body('comment')
    .trim()
    .notEmpty()
    .withMessage('Comment is required')
    .isLength({ max: 1000 })
    .withMessage('Comment cannot exceed 1000 characters')
];

// All routes require authentication
router.use(authenticate);

// Get vulnerability by ID
router.get('/:id', vulnerabilityController.getVulnerabilityById);

// Update vulnerability status
router.put(
  '/:id/status',
  validateRequest(updateStatusValidation),
  vulnerabilityController.updateStatus
);

// Add comment to vulnerability
// src/api/routes/vulnerabilityRoutes.js (tiáº¿p)
router.post(
    '/:id/comment',
    validateRequest(addCommentValidation),
    vulnerabilityController.addComment
  );
  
  // Assign vulnerability to user
  router.put('/:id/assign/:userId', vulnerabilityController.assignVulnerability);
  
  // Update vulnerability
  router.put('/:id', vulnerabilityController.updateVulnerability);
  
  // Get code snippet for vulnerability
  router.get('/:id/code-snippet', vulnerabilityController.getCodeSnippet);
  
  // Get all vulnerabilities with pagination and filtering
  router.get('/', vulnerabilityController.getAllVulnerabilities);
  
  // Search vulnerabilities
  router.get('/search/:term', vulnerabilityController.searchVulnerabilities);
  
  router.delete('/:id', vulnerabilityController.deleteVulnerability);
  
  module.exports = router;
  
 