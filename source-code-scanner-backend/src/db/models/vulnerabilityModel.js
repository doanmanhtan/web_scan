// src/db/models/vulnerabilityModel.js - FIXED SCHEMA VERSION
const mongoose = require('mongoose');

const vulnerabilitySchema = new mongoose.Schema({
  scan: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Scan',
    required: true
  },
  name: {
    type: String,
    required: true,
    trim: true
  },
  severity: {
    type: String,
    enum: ['critical', 'high', 'medium', 'low'],
    required: true
  },
  type: {
    type: String,
    enum: ['Memory Safety', 'Security', 'Code Quality', 'Performance', 'Concurrency', 'Static Analysis', 'Other'],
    required: true
  },
  tool: {
    type: String,
    enum: ['semgrep', 'snyk', 'clangTidy', 'cppcheck', 'clangStaticAnalyzer'],
    required: true
  },
  file: {
    fileName: { type: String, required: true },
    filePath: { type: String, required: true },
    fileExt: { type: String },
    fileHash: { type: String }
  },
  location: {
    line: { type: Number, required: true },
    column: { type: Number },
    endLine: { type: Number },
    endColumn: { type: Number }
  },
  description: {
    type: String,
    required: true
  },
  codeSnippet: {
    before: [String],
    line: { type: String, required: false, default: '' }, // FIXED: Not required, with default
    after: [String]
  },
  remediation: {
    description: { type: String },
    code: { type: String }
  },
  // FIXED: Allow both string arrays and object arrays for references
  references: [{
    type: mongoose.Schema.Types.Mixed, // Allow both strings and objects
    default: []
  }],
  status: {
    type: String,
    enum: ['open', 'in_progress', 'fixed', 'ignored', 'false_positive'],
    default: 'open'
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  fixedInCommit: {
    type: String
  },
  fixedAt: {
    type: Date
  },
  comments: [{
    text: { type: String, required: true },
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    createdAt: { type: Date, default: Date.now }
  }],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Compound index for faster queries
vulnerabilitySchema.index({ scan: 1, severity: 1 });
vulnerabilitySchema.index({ scan: 1, type: 1 });
vulnerabilitySchema.index({ scan: 1, tool: 1 });
vulnerabilitySchema.index({ scan: 1, status: 1 });
vulnerabilitySchema.index({ 'file.fileName': 1, scan: 1 });

const Vulnerability = mongoose.model('Vulnerability', vulnerabilitySchema);

module.exports = Vulnerability;